{"version":3,"file":"static/js/537.8b513478.chunk.js","mappings":"ySACA,EAA6B,6BAA7B,EAAoE,0BAApE,EAA0G,4BAA1G,EAAqJ,+B,SCarJ,EAH2B,WACzB,OAAO,SAACA,EAAD,KAIIA,EAAiB,WAC5B,IAAMC,GAASC,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWA,EAAMC,KAAKH,UAC9CI,GAAWC,EAAAA,EAAAA,KASjB,OAPAC,EAAAA,EAAAA,YAAU,WAER,OADAF,GAASG,EAAAA,EAAAA,OACF,WACLH,GAASI,EAAAA,EAAAA,UAEV,KAGD,+BACc,UAAXR,IAAsB,4DACvB,SAACS,EAAD,KACA,SAACC,EAAD,QAKOD,EAAqB,WAChC,IAAME,GAAWV,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWA,EAAMC,KAAKQ,YAChDC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAeA,OAJAV,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACd,UAAAM,EAAkBK,eAAlB,SAA2BC,gBAAe,KACzC,CAACP,KAGF,iBAAKQ,UAAWC,EAAgBC,SAdZ,SAACC,GACrB,IAAMC,EAAKD,EAAEE,cACTC,KAAKC,IAAIH,EAAGI,aAAeJ,EAAGK,UAAYL,EAAGM,cAAgB,KAC9Dd,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IASlC,UACGL,EAASmB,KAAI,SAACC,EAAGC,GAAJ,OACZ,SAACC,EAAD,CAASC,QAASH,GAAQA,EAAEI,QAE9B,gBAAKC,IAAKxB,QAKVqB,EAAqDI,EAAAA,MACzD,YAAkB,IAAfH,EAAc,EAAdA,QACD,OACE,iBAAKf,UAAWC,EAAhB,WACE,iBAAKD,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAmBkB,IAAKJ,EAAQK,QAC/CL,EAAQM,aAEX,0BAAON,EAAQA,gBAMVxB,EAA+B,WAC1C,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOoB,EAAP,KAAgBO,EAAhB,KACMrC,GAAWC,EAAAA,EAAAA,KACXL,GAASC,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWA,EAAMC,KAAKH,UAQpD,OACE,4BACE,0BACE,qBACE0C,SAAU,SAACpB,GAAD,OAAOmB,EAAWnB,EAAEE,cAAcmB,QAC5CA,MAAOT,OAGX,mBAAQU,SAAqB,UAAX5C,EAAoB6C,QAdf,WACpBX,IAEL9B,GAAS0C,EAAAA,EAAAA,IAAYZ,IACrBO,EAAW,MAUT","sources":["webpack://social-network/./src/pages/Chat/chatPage.module.css?36e9","pages/Chat/chatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messageImg\":\"chatPage_messageImg__s2YU6\",\"wrapper\":\"chatPage_wrapper__-6Hp2\",\"container\":\"chatPage_container__0IygT\",\"messageItems\":\"chatPage_messageItems__iP8wA\"};","import React, { useEffect, useRef, useState } from 'react'\r\nimport { ChatMessageApiType } from '../../api/chatApi'\r\n\r\nimport {\r\n  sendMessage,\r\n  startMessagesListening,\r\n  stopMessagesListening,\r\n} from '../../components/State/chatReducer'\r\nimport { useAppDispatch, useAppSelector } from '../../Types/hooks'\r\nimport styles from './chatPage.module.css'\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return <Chat />\r\n}\r\nexport default ChatPage\r\n\r\nexport const Chat: React.FC = () => {\r\n  const status = useAppSelector((state) => state.chat.status)\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening())\r\n    return () => {\r\n      dispatch(stopMessagesListening())\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <section>\r\n      {status === 'error' && <div>Error.Please refresh the page</div>}\r\n      <Messages />\r\n      <AddMessageForm />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport const Messages: React.FC = () => {\r\n  const messages = useAppSelector((state) => state.chat.messages)\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n  const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const el = e.currentTarget\r\n    if (Math.abs(el.scrollHeight - el.scrollTop - el.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true)\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    messagesAnchorRef.current?.scrollIntoView(true)\r\n  }, [messages])\r\n\r\n  return (\r\n    <div className={styles.wrapper} onScroll={scrollHandler}>\r\n      {messages.map((m, index) => (\r\n        <Message message={m} key={m.id} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageApiType }> = React.memo(\r\n  ({ message }) => {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.messageItems}>\r\n          <img className={styles.messageImg} src={message.photo} />\r\n          {message.userName}\r\n        </div>\r\n        <span>{message.message}</span>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport const AddMessageForm: React.FC<{}> = () => {\r\n  const [message, setMessage] = useState('')\r\n  const dispatch = useAppDispatch()\r\n  const status = useAppSelector((state) => state.chat.status)\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) return\r\n\r\n    dispatch(sendMessage(message))\r\n    setMessage('')\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <textarea\r\n          onChange={(e) => setMessage(e.currentTarget.value)}\r\n          value={message}\r\n        ></textarea>\r\n      </div>\r\n      <button disabled={status !== 'ready'} onClick={sendMessageHandler}>\r\n        Send\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["Chat","status","useAppSelector","state","chat","dispatch","useAppDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","className","styles","onScroll","e","el","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","src","photo","userName","setMessage","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}