{"version":3,"file":"static/js/672.cf6fd813.chunk.js","mappings":"uNACA,EAA0B,yBAA1B,EAA4D,wBAA5D,EAAmG,8BAAnG,EAA6K,0BAA7K,EAAmN,2BAAnN,EAA6P,8BAA7P,EAA0S,8BAA1S,EAAgV,uB,SCgBhV,EAfgB,SAACA,GACb,OACC,iBAAKC,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,UACC,gBAAKC,IAAI,8GAEb,gBAAKF,UAAWC,EAAhB,SAA2BF,EAAMI,c,UCQrC,EAbmB,SAACJ,GAChB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACA,0BACI,UAAC,KAAD,CAASC,GAAIF,EAAMJ,UAAWC,EAA9B,WACA,0BAAK,gBAAKD,UAAWC,EACzBC,IAAI,6GAEAH,EAAMQ,W,oBC2BRC,EAAiB,SAACT,GAMpB,OAEI,SAAC,KAAD,CACAU,cAAiB,CACjBC,eAAgB,IAEjBC,iBAAkBC,EAAAA,GACjBC,SAAY,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,WAXN,SAACD,GACjBf,EAAMiB,YAAYF,GAWlBG,CAAeH,EAAOJ,gBACtBK,EAAU,CAACD,OAAQ,MAPnB,SAUE,gBAAGI,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,WAAYC,EAAvC,EAAuCA,aAAvC,OACF,UAAC,KAAD,YACA,4BACA,SAAC,KAAD,CACAC,GAAI,WACJhB,KAAM,iBACNiB,YAAY,qBACZC,OAAQJ,EACRK,SAAUJ,IAETJ,EAAOR,gBAAkBS,EAAQT,gBAC9B,gBAAKV,UAAWC,EAAhB,SAA0BiB,EAAOR,iBAC/B,SAGP,0BAAK,mBAAQiB,KAAM,SAAUC,UAAWR,EAAnC,kCAWZ,EA1EgB,SAACrB,GAGb,OACI,qBAASC,UAAWC,EAApB,WACI,gBAAKD,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAhB,SAEOF,EAAM8B,YAAYC,QAAQC,KAAI,SAACC,GAC1B,OAAO,SAAC,EAAD,CAA4BzB,KAAMyB,EAAOzB,KAAMF,GAAI2B,EAAO3B,IAAzC2B,EAAO3B,YAO/C,iBAAKL,UAAWC,EAAhB,UAEQF,EAAM8B,YAAYI,SAASF,KAAI,SAAC5B,GAC5B,OAAO,SAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQE,QAInE,SAACG,EAAD,CAAgBQ,YAAajB,EAAMiB,qB,wCCQ/C,GA9B+BkB,EAAAA,WA8BhBC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAlBoB,SAACC,GACrB,MAAO,CACHR,YAAaQ,EAAMR,eAgBE,CAACb,YAAAA,EAAAA,IAC1BsB,EAAAA,EAFJ,CAICC","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__5Mw2-\",\"dialog\":\"Dialogs_dialog__986lm\",\"dialogsItems\":\"Dialogs_dialogsItems__HMyWn\",\"active\":\"Dialogs_active__mU2k4\",\"messages\":\"Dialogs_messages__Zs6rs\",\"AvatarImg\":\"Dialogs_AvatarImg__-dFnV\",\"messageItems\":\"Dialogs_messageItems__5Wp61\",\"messageImage\":\"Dialogs_messageImage__Egf7Y\",\"error\":\"Dialogs_error__PntpS\"};","import s from './../Dialogs.module.css'\r\n\r\nconst Message = (props) => {\r\n    return (\r\n     <div className={s.messageItems}> \r\n       <div className={s.messageImage}> \r\n        <img src=\"https://png.pngtree.com/png-clipart/20190630/original/pngtree-vector-avatar-icon-png-image_4162757.jpg\"/>\r\n        </div>\r\n    <div className={s.dialog}>{props.message}</div>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n//  className={s.dialog + ' ' + s.active}\r\n\r\n\r\nexport default Message\r\n\r\n\r\n","import s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/profile/' + props.id \r\n    return (   \r\n    <div>\r\n        <NavLink to={path} className={s.dialog}> \r\n        <div><img className={s.AvatarImg} \r\n    src=\"https://png.pngtree.com/png-clipart/20190630/original/pngtree-vector-avatar-icon-png-image_4162757.jpg\"/>\r\n    </div>\r\n       {props.name}</NavLink>\r\n    </div>)\r\n}\r\n\r\n\r\nexport default DialogItem","import s from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport React from 'react'\r\nimport { Form, Field, Formik } from 'formik'\r\nimport { DialogsSchema } from '../../Validators/ValidationDialogs'\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n\r\n    return (\r\n        <section className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                <div className={s.dialogsItems}>\r\n                    {\r\n                       props.dialogsPage.dialogs.map((dialog) => {\r\n                            return <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                {\r\n                    props.dialogsPage.messages.map((message) => {\r\n                        return <Message message={message.message} key={message.id}/>\r\n                    })\r\n                }\r\n\r\n            <AddMessageForm sendMessage={props.sendMessage}/>\r\n\r\n            </div> \r\n        </section>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values);  \r\n     }\r\n\r\n    return (\r\n\r\n        <Formik \r\n        initialValues = {{\r\n        newMessageBody: '',\r\n      }}\r\n       validationSchema={DialogsSchema}\r\n        onSubmit = {(values, {resetForm}) => {\r\n        addNewMessage( values.newMessageBody)\r\n        resetForm({values: ''})\r\n      }}\r\n    >\r\n         {({ errors, touched, dirty, handleBlur, handleChange  }) => (\r\n        <Form>\r\n        <div>\r\n        <Field\r\n        as={\"textarea\"}\r\n        name={\"newMessageBody\"}\r\n        placeholder=\"Enter your message\"\r\n        onBlur={handleBlur}\r\n        onChange={handleChange}\r\n        />\r\n        {errors.newMessageBody && touched.newMessageBody ? (\r\n            <div className={s.error}>{errors.newMessageBody}</div>\r\n          ) : null}\r\n\r\n        </div>\r\n       <div><button type={\"submit\"} disabled={!dirty} >Add message</button></div>\r\n        </Form>\r\n       )}\r\n        </Formik>\r\n        )\r\n   } \r\n\r\n\r\n\r\n\r\n\r\nexport default Dialogs","\r\nimport React from 'react'\r\nimport Dialogs from './Dialogs'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { sendMessage} from '../State/dialogsReducer'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\n  \r\nclass DialogsContainer extends React.Component {\r\n    // const dialogsPage = useSelector(state => state.dialogsPage)\r\n    // const dispatch = useDispatch() \r\n \r\nrender() {\r\n   \r\n     return (\r\n    <Dialogs dialogsPage={this.props.dialogsPage} sendMessage={this.props.sendMessage} />\r\n   )\r\n}\r\n}\r\n \r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage, \r\n        \r\n    }\r\n}\r\n\r\n let mapDispatchToProps = (dispatch) => {\r\n    return { \r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessage(newMessageBody))\r\n        }\r\n    }\r\n }\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {sendMessage}),\r\n    withAuthRedirect\r\n)\r\n(Dialogs)"],"names":["props","className","s","src","message","path","id","to","name","AddMessageForm","initialValues","newMessageBody","validationSchema","DialogsSchema","onSubmit","values","resetForm","sendMessage","addNewMessage","errors","touched","dirty","handleBlur","handleChange","as","placeholder","onBlur","onChange","type","disabled","dialogsPage","dialogs","map","dialog","messages","React","compose","connect","state","withAuthRedirect","Dialogs"],"sourceRoot":""}